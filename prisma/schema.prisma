generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                   String    @id @default(cuid())
  username             String    @unique
  name                 String?
  email                String?   @unique
  password             String?
  role                 UserRole  @default(USER)
  isActive             Boolean   @default(true)
  passwordResetToken   String?   @unique
  passwordResetExpires DateTime?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  accounts             Account[]
  sessions             Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Dispenser {
  id            String         @id @default(cuid())
  name          String
  code          String         @unique
  tankId        String
  fuelTypeId    String
  isActive      Boolean        @default(true)
  location      String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  fuelType      FuelType       @relation(fields: [fuelTypeId], references: [id])
  tank          Tank           @relation(fields: [tankId], references: [id])

  // inverse relation to ShiftMeter
  shiftMeters   ShiftMeter[]
}

model Tank {
  id           String        @id @default(cuid())
  name         String
  code         String        @unique
  capacity     Float
  currentLevel Float         @default(0)
  minLevel     Float         @default(0)
  maxLevel     Float?
  fuelTypeId   String
  isActive     Boolean       @default(true)
  location     String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  dispensers   Dispenser[]
  fuelType     FuelType      @relation(fields: [fuelTypeId], references: [id])

  // inverse relations for shifts
  shiftMeters  ShiftMeter[]
  tankChecks   ShiftTankCheck[]
}

model Product {
  id            String         @id @default(cuid())
  name          String
  code          String         @unique
  description   String?
  cost          Float?
  fuelTypeId    String?
  category      String?
  isActive      Boolean        @default(true)
  stockQuantity Int            @default(0)
  minStock      Int            @default(0)
  unit          String         @default("ลิตร")
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  fuelType      FuelType?      @relation(fields: [fuelTypeId], references: [id])
  prices        ProductPrice[]

  // inverse relation
  shiftSales    ShiftSale[]
}

model ProductPrice {
  id            String    @id @default(cuid())
  productId     String
  price         Float
  effectiveDate DateTime
  endDate       DateTime?
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  product       Product   @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId, effectiveDate])
  @@index([effectiveDate, isActive])
}

model FuelType {
  id            String               @id @default(cuid())
  name          String               @unique
  code          String               @unique
  description   String?
  isActive      Boolean              @default(true)
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
  fuelDiscounts DebtorFuelDiscount[]
  dispensers    Dispenser[]
  prices        FuelPrice[]
  products      Product[]
  tanks         Tank[]

  // inverse relation for shift meters
  shiftMeters   ShiftMeter[]
  // inverse relation for stamped fuel prices per shift
  shiftFuelPrices ShiftFuelPrice[]
}

model DebtorRecord {
  id            String               @id @default(cuid())
  customerName  String
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
  address       String?
  branch        String?
  contactPerson String?
  creditLimit   Float?               @default(0)
  creditTerm    Int?                 @default(30)
  customerCode  String               @unique
  email         String?
  fax           String?
  isActive      Boolean              @default(true)
  phone         String?
  taxId         String?
  fuelDiscounts DebtorFuelDiscount[]
  transactions  DebtorTransaction[]

  // inverse relation to shift sales
  shiftSales    ShiftSale[]
}

model DebtorFuelDiscount {
  id           String       @id @default(cuid())
  debtorId     String
  fuelTypeId   String
  discount     Float        @default(0)
  discountType String       @default("AMOUNT")
  isActive     Boolean      @default(true)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  debtor       DebtorRecord @relation(fields: [debtorId], references: [id], onDelete: Cascade)
  fuelType     FuelType     @relation(fields: [fuelTypeId], references: [id])

  @@unique([debtorId, fuelTypeId])
}

model DebtorTransaction {
  id          String            @id @default(cuid())
  debtorId    String
  type        TransactionType
  amount      Float
  balance     Float
  description String?
  dueDate     DateTime?
  status      TransactionStatus @default(PENDING)
  paidDate    DateTime?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  debtor      DebtorRecord      @relation(fields: [debtorId], references: [id], onDelete: Cascade)
}

model FuelPrice {
  id            String    @id @default(cuid())
  fuelTypeId    String
  price         Float
  effectiveDate DateTime
  endDate       DateTime?
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  fuelType      FuelType  @relation(fields: [fuelTypeId], references: [id])

  @@index([fuelTypeId, effectiveDate])
  @@index([effectiveDate, isActive])
}

// Shift (ผลัดงาน) models
model Shift {
  id          String          @id @default(cuid())
  name        String
  startTime   DateTime
  endTime     DateTime?
  description String?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  meters      ShiftMeter[]
  tankChecks  ShiftTankCheck[]
  sales       ShiftSale[]
  shiftFuelPrices ShiftFuelPrice[]
}

model ShiftMeter {
  id            String   @id @default(cuid())
  shiftId       String
  dispenserId   String
  tankId        String
  fuelTypeId    String
  startMeter    Float    @default(0)
  endMeter      Float?   
  soldVolume    Float?   
  amount        Float?   
  testWithdraw  Float?   @default(0)
  useWithdraw   Float?   @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  shift         Shift     @relation(fields: [shiftId], references: [id], onDelete: Cascade)
  dispenser     Dispenser @relation(fields: [dispenserId], references: [id])
  tank          Tank      @relation(fields: [tankId], references: [id])
  fuelType      FuelType  @relation(fields: [fuelTypeId], references: [id])

  @@index([shiftId])
  @@index([dispenserId])
}

model ShiftTankCheck {
  id           String   @id @default(cuid())
  shiftId      String
  tankId       String
  firstMeasure Float    @default(0) // วัดครั้งแรก (ใช้ค่าจากผลัดก่อนหน้า)
  received     Float    @default(0)
  sold         Float?   
  remaining    Float?   
  lastMeasure  Float?   
  diff         Float?   
  diffPercent  Float?   
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  shift        Shift    @relation(fields: [shiftId], references: [id], onDelete: Cascade)
  tank         Tank     @relation(fields: [tankId], references: [id])

  @@index([shiftId])
  @@index([tankId])
}

model ShiftSale {
  id           String   @id @default(cuid())
  shiftId      String
  debtorId     String?  // optional customer reference
  customerCode String?
  plateNumber  String?
  deliveryNote String?
  productId    String?
  productName  String
  quantity     Float
  unitPrice    Float
  total        Float
  discount     Float   @default(0)
  netTotal     Float
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  shift        Shift    @relation(fields: [shiftId], references: [id], onDelete: Cascade)
  product      Product? @relation(fields: [productId], references: [id])
  debtor       DebtorRecord? @relation(fields: [debtorId], references: [id])

  @@index([shiftId])
  @@index([productId])
}

model ShiftFuelPrice {
  id          String    @id @default(cuid())
  shiftId     String
  fuelTypeId  String
  price       Float
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  shift       Shift     @relation(fields: [shiftId], references: [id], onDelete: Cascade)
  fuelType    FuelType  @relation(fields: [fuelTypeId], references: [id])

  @@index([shiftId])
  @@index([fuelTypeId])
}

// Enums
enum UserRole {
  ADMIN
  MANAGER
  USER
}

enum TransactionType {
  SALE
  PAYMENT
  ADJUSTMENT
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

enum DebtorStatus {
  PENDING
  PARTIAL
  PAID
  OVERDUE
}
