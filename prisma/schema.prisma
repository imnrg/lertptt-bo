generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                   String    @id @default(cuid())
  username             String    @unique
  name                 String?
  email                String?   @unique
  password             String?
  role                 UserRole  @default(USER)
  isActive             Boolean   @default(true)
  passwordResetToken   String?   @unique
  passwordResetExpires DateTime?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  accounts             Account[]
  sessions             Session[]
  shifts               Shift[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Shift {
  id            String           @id @default(cuid())
  name          String
  startTime     DateTime
  endTime       DateTime?
  userId        String
  status        ShiftStatus      @default(ACTIVE)
  notes         String?
  totalSales    Float            @default(0)
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  cashSales     Float            @default(0)
  creditSales   Float            @default(0)
  meterReadings MeterReading[]
  sales         Sale[]
  user          User             @relation(fields: [userId], references: [id])
  shiftPrices   ShiftFuelPrice[]
  tankReadings  TankReading[]
  tankRefills   TankRefill[]
}

model ShiftFuelPrice {
  id         String   @id @default(cuid())
  shiftId    String
  fuelTypeId String
  price      Float
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  fuelType   FuelType @relation(fields: [fuelTypeId], references: [id])
  shift      Shift    @relation(fields: [shiftId], references: [id], onDelete: Cascade)

  @@unique([shiftId, fuelTypeId])
}

model MeterReading {
  id           String    @id @default(cuid())
  shiftId      String
  dispenserId  String
  startReading Float
  endReading   Float?
  testLiters   Float     @default(0)
  usageLiters  Float     @default(0)
  discount     Float     @default(0)
  totalLiters  Float?
  totalAmount  Float?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  dispenser    Dispenser @relation(fields: [dispenserId], references: [id])
  shift        Shift     @relation(fields: [shiftId], references: [id], onDelete: Cascade)

  @@unique([shiftId, dispenserId])
}

model TankReading {
  id                String   @id @default(cuid())
  shiftId           String
  tankId            String
  startLevel        Float
  calculatedLevel   Float?
  actualLevel       Float?
  difference        Float?
  differencePercent Float?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  shift             Shift    @relation(fields: [shiftId], references: [id], onDelete: Cascade)
  tank              Tank     @relation(fields: [tankId], references: [id])

  @@unique([shiftId, tankId])
}

model TankRefill {
  id        String   @id @default(cuid())
  shiftId   String
  tankId    String
  amount    Float
  timestamp DateTime @default(now())
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  shift     Shift    @relation(fields: [shiftId], references: [id], onDelete: Cascade)
  tank      Tank     @relation(fields: [tankId], references: [id])
}

model Sale {
  id           String              @id @default(cuid())
  shiftId      String
  billNumber   String              @unique
  licensePlate String?
  paymentType  PaymentType         @default(CASH)
  debtorId     String?
  subtotal     Float               @default(0)
  discount     Float               @default(0)
  total        Float               @default(0)
  notes        String?
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
  transactions DebtorTransaction[]
  debtor       DebtorRecord?       @relation(fields: [debtorId], references: [id])
  shift        Shift               @relation(fields: [shiftId], references: [id], onDelete: Cascade)
  items        SaleItem[]
}

model SaleItem {
  id          String   @id @default(cuid())
  saleId      String
  productId   String
  productCode String
  productName String
  unitPrice   Float
  quantity    Float
  discount    Float    @default(0)
  total       Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  product     Product  @relation(fields: [productId], references: [id])
  sale        Sale     @relation(fields: [saleId], references: [id], onDelete: Cascade)
}

model Dispenser {
  id            String         @id @default(cuid())
  name          String
  code          String         @unique
  tankId        String
  fuelTypeId    String
  isActive      Boolean        @default(true)
  location      String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  fuelType      FuelType       @relation(fields: [fuelTypeId], references: [id])
  tank          Tank           @relation(fields: [tankId], references: [id])
  meterReadings MeterReading[]
}

model Tank {
  id           String        @id @default(cuid())
  name         String
  code         String        @unique
  capacity     Float
  currentLevel Float         @default(0)
  minLevel     Float         @default(0)
  maxLevel     Float?
  fuelTypeId   String
  isActive     Boolean       @default(true)
  location     String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  dispensers   Dispenser[]
  fuelType     FuelType      @relation(fields: [fuelTypeId], references: [id])
  tankReadings TankReading[]
  tankRefills  TankRefill[]
}

model Product {
  id            String         @id @default(cuid())
  name          String
  code          String         @unique
  description   String?
  cost          Float?
  fuelTypeId    String?
  category      String?
  isActive      Boolean        @default(true)
  stockQuantity Int            @default(0)
  minStock      Int            @default(0)
  unit          String         @default("ลิตร")
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  fuelType      FuelType?      @relation(fields: [fuelTypeId], references: [id])
  prices        ProductPrice[]
  saleItems     SaleItem[]
}

model ProductPrice {
  id            String    @id @default(cuid())
  productId     String
  price         Float
  effectiveDate DateTime
  endDate       DateTime?
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  product       Product   @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId, effectiveDate])
  @@index([effectiveDate, isActive])
}

model FuelType {
  id            String               @id @default(cuid())
  name          String               @unique
  code          String               @unique
  description   String?
  isActive      Boolean              @default(true)
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
  fuelDiscounts DebtorFuelDiscount[]
  dispensers    Dispenser[]
  prices        FuelPrice[]
  products      Product[]
  shiftPrices   ShiftFuelPrice[]
  tanks         Tank[]
}

model DebtorRecord {
  id            String               @id @default(cuid())
  customerName  String
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
  address       String?
  branch        String?
  contactPerson String?
  creditLimit   Float?               @default(0)
  creditTerm    Int?                 @default(30)
  customerCode  String               @unique
  email         String?
  fax           String?
  isActive      Boolean              @default(true)
  phone         String?
  taxId         String?
  fuelDiscounts DebtorFuelDiscount[]
  transactions  DebtorTransaction[]
  sales         Sale[]
}

model DebtorFuelDiscount {
  id           String       @id @default(cuid())
  debtorId     String
  fuelTypeId   String
  discount     Float        @default(0)
  discountType String       @default("AMOUNT")
  isActive     Boolean      @default(true)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  debtor       DebtorRecord @relation(fields: [debtorId], references: [id], onDelete: Cascade)
  fuelType     FuelType     @relation(fields: [fuelTypeId], references: [id])

  @@unique([debtorId, fuelTypeId])
}

model DebtorTransaction {
  id          String            @id @default(cuid())
  debtorId    String
  saleId      String?
  type        TransactionType
  amount      Float
  balance     Float
  description String?
  dueDate     DateTime?
  status      TransactionStatus @default(PENDING)
  paidDate    DateTime?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  debtor      DebtorRecord      @relation(fields: [debtorId], references: [id], onDelete: Cascade)
  sale        Sale?             @relation(fields: [saleId], references: [id])
}

model FuelPrice {
  id            String    @id @default(cuid())
  fuelTypeId    String
  price         Float
  effectiveDate DateTime
  endDate       DateTime?
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  fuelType      FuelType  @relation(fields: [fuelTypeId], references: [id], onDelete: Cascade)

  @@index([fuelTypeId, effectiveDate])
  @@index([effectiveDate, isActive])
}

enum UserRole {
  ADMIN
  MANAGER
  USER
}

enum ShiftStatus {
  ACTIVE
  COMPLETED
  CANCELLED
}

enum DebtorStatus {
  PENDING
  PARTIAL
  PAID
  OVERDUE
}

enum PaymentType {
  CASH
  CREDIT
}

enum TransactionType {
  SALE
  PAYMENT
  ADJUSTMENT
}

enum TransactionStatus {
  PENDING
  PAID
  PARTIAL
  OVERDUE
  CANCELLED
}
