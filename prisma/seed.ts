import { PrismaClient } from '@prisma/client'
import bcrypt from 'bcryptjs'

const prisma = new PrismaClient()

async function main() {
  console.log('üå± ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£ seed ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...')

  // Check if admin user already exists
  const existingAdmin = await prisma.user.findFirst({
    where: {
      role: 'ADMIN'
    }
  })

  if (existingAdmin) {
    console.log('‚úÖ ‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß:', existingAdmin.username)
    return
  }

  // Create admin user
  const hashedPassword = await bcrypt.hash('admin123', 12)
  
  const adminUser = await prisma.user.create({
    data: {
      username: 'admin',
      name: '‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö',
      email: 'admin@lertptt.com',
      password: hashedPassword,
      role: 'ADMIN',
      isActive: true,
    }
  })

  console.log('‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:')
  console.log('   ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ:', adminUser.username)
  console.log('   ‡∏ä‡∏∑‡πà‡∏≠:', adminUser.name)
  console.log('   ‡∏≠‡∏µ‡πÄ‡∏°‡∏•:', adminUser.email)
  console.log('   ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô: admin123')
  console.log('   ‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó:', adminUser.role)

  // Create some sample fuel types
  const fuelTypes = await prisma.fuelType.createMany({
    data: [
      {
        name: '‡πÄ‡∏ö‡∏ô‡∏ã‡∏¥‡∏ô 95',
        code: 'E95',
        description: '‡πÄ‡∏ö‡∏ô‡∏ã‡∏¥‡∏ô 95 ‡∏≠‡∏≠‡∏Å‡πÄ‡∏ó‡∏ô',
        isActive: true,
      },
      {
        name: '‡πÄ‡∏ö‡∏ô‡∏ã‡∏¥‡∏ô 91',
        code: 'E91',
        description: '‡πÄ‡∏ö‡∏ô‡∏ã‡∏¥‡∏ô 91 ‡∏≠‡∏≠‡∏Å‡πÄ‡∏ó‡∏ô',
        isActive: true,
      },
      {
        name: '‡∏î‡∏µ‡πÄ‡∏ã‡∏•',
        code: 'DSL',
        description: '‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô‡∏î‡∏µ‡πÄ‡∏ã‡∏•',
        isActive: true,
      },
      {
        name: '‡πÅ‡∏Å‡πä‡∏™‡πÇ‡∏ã‡∏Æ‡∏≠‡∏•‡πå 95',
        code: 'GSH95',
        description: '‡πÅ‡∏Å‡πä‡∏™‡πÇ‡∏ã‡∏Æ‡∏≠‡∏•‡πå 95',
        isActive: true,
      }
    ],
    skipDuplicates: true,
  })

  console.log(`‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡πÄ‡∏û‡∏•‡∏¥‡∏á ${fuelTypes.count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`)

  // Create sample products with prices
  const fuelTypeRecords = await prisma.fuelType.findMany()
  
  for (const fuelType of fuelTypeRecords) {
    const product = await prisma.product.create({
      data: {
        name: fuelType.name,
        code: `PROD_${fuelType.code}`,
        description: `‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå ${fuelType.name}`,
        cost: 35.5,
        fuelTypeId: fuelType.id,
        category: '‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡πÄ‡∏û‡∏•‡∏¥‡∏á',
        isActive: true,
        stockQuantity: 1000,
        minStock: 100,
        unit: '‡∏•‡∏¥‡∏ï‡∏£',
      }
    })

    // Create initial price for the product
    await prisma.productPrice.create({
      data: {
        productId: product.id,
        price: 38.5, // Sample price
        effectiveDate: new Date(),
        isActive: true,
      }
    })

    console.log(`‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå‡πÅ‡∏•‡∏∞‡∏£‡∏≤‡∏Ñ‡∏≤: ${product.name}`)
  }

  // Create sample tanks
  const tanks = []
  for (let i = 1; i <= 4; i++) {
    const fuelType = fuelTypeRecords[i - 1]
    if (fuelType) {
      const tank = await prisma.tank.create({
        data: {
          name: `‡∏ñ‡∏±‡∏á‡∏ó‡∏µ‡πà ${i}`,
          code: `TANK_${i.toString().padStart(2, '0')}`,
          capacity: 50000,
          currentLevel: 25000,
          minLevel: 5000,
          maxLevel: 48000,
          fuelTypeId: fuelType.id,
          isActive: true,
          location: `‡πÇ‡∏ã‡∏ô ${i}`,
        }
      })
      tanks.push(tank)
      console.log(`‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ñ‡∏±‡∏á‡πÄ‡∏Å‡πá‡∏ö‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô: ${tank.name}`)
    }
  }

  // Create sample dispensers
  for (const tank of tanks) {
    for (let j = 1; j <= 2; j++) {
      const dispenser = await prisma.dispenser.create({
        data: {
          name: `‡∏´‡∏±‡∏ß‡∏à‡πà‡∏≤‡∏¢ ${tank.name.replace('‡∏ñ‡∏±‡∏á‡∏ó‡∏µ‡πà', '')}${j}`,
          code: `DISP_${tank.code.replace('TANK_', '')}_${j}`,
          tankId: tank.id,
          fuelTypeId: tank.fuelTypeId,
          isActive: true,
          location: `${tank.location} ‡∏´‡∏±‡∏ß‡∏à‡πà‡∏≤‡∏¢ ${j}`,
        }
      })
      console.log(`‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏±‡∏ß‡∏à‡πà‡∏≤‡∏¢: ${dispenser.name}`)
    }
  }

  console.log('üéâ seed ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!')
}

main()
  .catch((e) => {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ seed:', e)
    process.exit(1)
  })
  .finally(async () => {
    await prisma.$disconnect()
  })