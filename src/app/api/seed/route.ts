import { NextResponse } from 'next/server'
import { PrismaClient } from '@prisma/client'
import bcrypt from 'bcryptjs'

const prisma = new PrismaClient()

export async function GET() {
  try {
    // Check if any admin user already exists
    const adminCount = await prisma.user.count({
      where: {
        role: 'ADMIN'
      }
    })

    if (adminCount > 0) {
      return NextResponse.json({
        success: false,
        message: '‡∏£‡∏∞‡∏ö‡∏ö‡∏°‡∏µ‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡πÅ‡∏•‡πâ‡∏ß ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ',
        adminCount
      })
    }

    // Create admin user
    const hashedPassword = await bcrypt.hash('admin123', 12)
    
    await prisma.user.create({
      data: {
        username: 'admin',
        name: '‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö',
        email: 'admin@lertptt.com',
        password: hashedPassword,
        role: 'ADMIN',
        isActive: true,
      }
    })

    // Create some sample fuel types
    await prisma.fuelType.createMany({
      data: [
        {
          name: '‡πÄ‡∏ö‡∏ô‡∏ã‡∏¥‡∏ô 95',
          code: 'E95',
          description: '‡πÄ‡∏ö‡∏ô‡∏ã‡∏¥‡∏ô 95 ‡∏≠‡∏≠‡∏Å‡πÄ‡∏ó‡∏ô',
          isActive: true,
        },
        {
          name: '‡πÄ‡∏ö‡∏ô‡∏ã‡∏¥‡∏ô 91',
          code: 'E91',
          description: '‡πÄ‡∏ö‡∏ô‡∏ã‡∏¥‡∏ô 91 ‡∏≠‡∏≠‡∏Å‡πÄ‡∏ó‡∏ô',
          isActive: true,
        },
        {
          name: '‡∏î‡∏µ‡πÄ‡∏ã‡∏•',
          code: 'DSL',
          description: '‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô‡∏î‡∏µ‡πÄ‡∏ã‡∏•',
          isActive: true,
        },
        {
          name: '‡πÅ‡∏Å‡πä‡∏™‡πÇ‡∏ã‡∏Æ‡∏≠‡∏•‡πå 95',
          code: 'GSH95',
          description: '‡πÅ‡∏Å‡πä‡∏™‡πÇ‡∏ã‡∏Æ‡∏≠‡∏•‡πå 95',
          isActive: true,
        }
      ],
      skipDuplicates: true,
    })

    return NextResponse.json({
      success: true,
      message: 'üéâ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!',
      credentials: {
        username: 'admin',
        password: 'admin123',
        loginUrl: '/auth/login'
      },
      note: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å'
    })

  } catch (error) {
    console.error('Seed error:', error)
    return NextResponse.json({
      success: false,
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô',
      error: error instanceof Error ? error.message : 'Unknown error'
    }, { status: 500 })
  } finally {
    await prisma.$disconnect()
  }
}

// Keep POST method for backward compatibility
export async function POST() {
  return GET()
}